{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","devices","setDevices","useState","deviceName","setDeviceName","location","setLocation","error","setError","successMessage","setSuccessMessage","useEffect","async","response","axios","get","data","console","fetchDevices","React","createElement","style","backgroundColor","color","minHeight","padding","length","map","device","key","id","name","onSubmit","e","preventDefault","post","success","message","updatedDevicesResponse","errors","type","value","onChange","target","required","reportWebVitals","onPerfEntry","Function","__webpack_require__","then","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","StrictMode"],"mappings":"6MAoGeA,MAhGf,WACE,MAAOC,EAASC,GAAcC,mBAAS,KAChCC,EAAYC,GAAiBF,mBAAS,KACtCG,EAAUC,GAAeJ,mBAAS,KAClCK,EAAOC,GAAYN,mBAAS,KAC5BO,EAAgBC,GAAqBR,mBAAS,IA4CrD,OAzCAS,oBAAU,KACaC,WACnB,IACE,MAAMC,QAAiBC,IAAMC,IAAI,sCACjCd,EAAWY,EAASG,MACpB,MAAOT,GACPU,QAAQV,MAAM,0BAA2BA,GACzCC,EAAS,8BAIbU,IACC,IA8BDC,IAAAC,cAAA,OAAKC,MAAO,CAAEC,gBAAiB,OAAQC,MAAO,QAASC,UAAW,QAASC,QAAS,SAClFN,IAAAC,cAAA,UAAI,eACHb,GAASY,IAAAC,cAAA,KAAGC,MAAO,CAAEE,MAAO,QAAUhB,GACtCE,GAAkBU,IAAAC,cAAA,KAAGC,MAAO,CAAEE,MAAO,UAAYd,GAClDU,IAAAC,cAAA,UACGpB,EAAQ0B,OAAS,EAChB1B,EAAQ2B,IAAKC,GACXT,IAAAC,cAAA,MAAIS,IAAKD,EAAOE,IACbF,EAAOG,KAAK,MAAIH,EAAOvB,WAI5Bc,IAAAC,cAAA,SAAG,sBAIPD,IAAAC,cAAA,UAAI,cACJD,IAAAC,cAAA,QAAMY,SA5CWpB,UACnBqB,EAAEC,iBAEF,IACE,MAAMrB,QAAiBC,IAAMqB,KAAK,wCAAyC,CACzEhC,aACAE,aAGF,GAAIQ,EAASG,KAAKoB,QAAS,CACzBhC,EAAc,IACdE,EAAY,IACZE,EAAS,IACTE,EAAkBG,EAASG,KAAKqB,SAAW,8BAE3C,MAAMC,QAA+BxB,IAAMC,IAAI,qCAC/Cd,EAAWqC,EAAuBtB,WAElCR,EAAS,6BAA+BK,EAASG,KAAKuB,QAAU,kBAElE,MAAOhC,GACPU,QAAQV,MAAM,2BAA4BA,EAAMM,SAAWN,EAAMM,SAASG,KAAOT,EAAM8B,SACvF7B,EAAS,+BAuBPW,IAAAC,cAAA,WACED,IAAAC,cAAA,aAAO,eAELD,IAAAC,cAAA,SACEoB,KAAK,OACLC,MAAOtC,EACPuC,SAAWT,GAAM7B,EAAc6B,EAAEU,OAAOF,OACxCG,UAAQ,MAIdzB,IAAAC,cAAA,WACED,IAAAC,cAAA,aAAO,YAELD,IAAAC,cAAA,SACEoB,KAAK,OACLC,MAAOpC,EACPqC,SAAWT,GAAM3B,EAAY2B,EAAEU,OAAOF,OACtCG,UAAQ,MAIdzB,IAAAC,cAAA,UAAQoB,KAAK,UAAS,aClFfK,MAZSC,IAClBA,GAAeA,aAAuBC,UACxCC,EAAAf,EAAA,GAAAgB,KAAAD,EAAAE,KAAA,UAAqBD,KAAKE,IAAiD,IAAhDC,OAAEA,EAAMC,OAAEA,EAAMC,OAAEA,EAAMC,OAAEA,EAAMC,QAAEA,GAASL,EACpEC,EAAON,GACPO,EAAOP,GACPQ,EAAOR,GACPS,EAAOT,GACPU,EAAQV,MCDDW,IAASC,WAAWC,SAASC,eAAe,SACpDC,OACH1C,IAAAC,cAACD,IAAM2C,WAAU,KACf3C,IAAAC,cAACrB,EAAG,QAOR8C","file":"static/js/main.d55d7484.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\n\n// Main App Component\nfunction App() {\n  const [devices, setDevices] = useState([]);\n  const [deviceName, setDeviceName] = useState('');\n  const [location, setLocation] = useState('');\n  const [error, setError] = useState('');\n  const [successMessage, setSuccessMessage] = useState('');\n\n  // Fetch devices from API\n  useEffect(() => {\n    const fetchDevices = async () => {\n      try {\n        const response = await axios.get('http://127.0.0.1:8000/api/devices/'); // Replace with your API endpoint\n        setDevices(response.data);\n      } catch (error) {\n        console.error('Error fetching devices:', error);\n        setError('Failed to fetch devices.');\n      }\n    };\n\n    fetchDevices();\n  }, []);\n\n  // Handle form submission\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n\n    try {\n      const response = await axios.post('http://127.0.0.1:8000/api/add-device/', {\n        deviceName,\n        location,\n      });\n\n      if (response.data.success) {\n        setDeviceName('');\n        setLocation('');\n        setError('');\n        setSuccessMessage(response.data.message || 'Device added successfully!');\n        // Optionally refresh the device list\n        const updatedDevicesResponse = await axios.get('http://127.0.0.1:8000/api/devices');\n        setDevices(updatedDevicesResponse.data);\n      } else {\n        setError('Failed to submit device: ' + (response.data.errors || 'Unknown error'));\n      }\n    } catch (error) {\n      console.error('Error submitting device:', error.response ? error.response.data : error.message);\n      setError('Failed to submit device.');\n    }\n  };\n\n  return (\n    <div style={{ backgroundColor: 'blue', color: 'white', minHeight: '100vh', padding: '20px' }}>\n      <h1>Device List</h1>\n      {error && <p style={{ color: 'red' }}>{error}</p>}\n      {successMessage && <p style={{ color: 'green' }}>{successMessage}</p>}\n      <ul>\n        {devices.length > 0 ? (\n          devices.map((device) => (\n            <li key={device.id}>\n              {device.name} - {device.location}\n            </li>\n          ))\n        ) : (\n          <p>No devices found.</p>\n        )}\n      </ul>\n\n      <h2>Add Device</h2>\n      <form onSubmit={handleSubmit}>\n        <div>\n          <label>\n            Device Name:\n            <input\n              type=\"text\"\n              value={deviceName}\n              onChange={(e) => setDeviceName(e.target.value)}\n              required\n            />\n          </label>\n        </div>\n        <div>\n          <label>\n            Location:\n            <input\n              type=\"text\"\n              value={location}\n              onChange={(e) => setLocation(e.target.value)}\n              required\n            />\n          </label>\n        </div>\n        <button type=\"submit\">Submit</button>\n      </form>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}